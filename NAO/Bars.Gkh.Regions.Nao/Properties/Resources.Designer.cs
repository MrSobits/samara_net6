//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bars.Gkh.Regions.Nao.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Bars.Gkh.Regions.Nao.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ﻿Ext.define(&apos;B4.aspects.permission.realityobj.Block&apos;, {
        ///    extend: &apos;B4.aspects.permission.GkhStatePermissionAspect&apos;,
        ///    alias: &apos;widget.realityobjblockperm&apos;,
        ///
        ///    permissions: [
        ///        /*
        ///        * name - имя пермишена в дереве, 
        ///        * applyTo - селектор контрола, к которому применяется пермишен, 
        ///        * selector - селектор формы, на которой находится контрол
        ///        */
        ///        //основной грид блоков дома
        ///        { name: &apos;Gkh.RealityObject.Register.Block.Create&apos;, applyTo: &apos;b4addbutton&apos;,  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string Block {
            get {
                return ResourceManager.GetString("Block", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ﻿Ext.define(&apos;B4.view.realityobj.GeneralParameterContainer&apos;, {
        ///    extend: &apos;Ext.form.FieldSet&apos;,
        ///    alias: &apos;widget.realityobjgeneralparametercontainer&apos;,
        ///    layout: {
        ///        type: &apos;hbox&apos;,
        ///        align: &apos;stretch&apos;
        ///    },
        ///    title: &apos;Общие характеристики&apos;,
        ///
        ///    defaults: {
        ///        flex: 1
        ///    },
        ///
        ///    margin: &apos;0 5&apos;,
        ///
        ///    initComponent: function () {
        ///        var me = this;
        ///
        ///        Ext.applyIf(me, {
        ///            items: [
        ///                {
        ///                    xtype: &apos;container&apos;,
        ///             [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string GeneralParameterContainer {
            get {
                return ResourceManager.GetString("GeneralParameterContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ext.define(&apos;B4.aspects.fieldrequirement.RealityObject&apos;, {
        ///    extend: &apos;B4.aspects.FieldRequirementAspect&apos;,
        ///    alias: &apos;widget.realityobjfieldrequirement&apos;,
        ///
        ///    init: function () {
        ///        this.requirements = [
        ///
        ///            { name: &apos;Gkh.RealityObject.Field.Address_Rqrd&apos;, applyTo: &apos;#fiasAddressRealityObject&apos;, selector: &apos;realityobjEditPanel&apos; },
        ///            { name: &apos;Gkh.RealityObject.Field.HauseGuid_Rqrd&apos;, applyTo: &apos;#fiasHauseGuidRealityObject&apos;, selector: &apos;realityobjEditPanel&apos; },
        ///            { name: &apos;G [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string RealityObject {
            get {
                return ResourceManager.GetString("RealityObject", resourceCulture);
            }
        }
    }
}
