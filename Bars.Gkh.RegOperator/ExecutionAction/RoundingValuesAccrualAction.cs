namespace Bars.Gkh.RegOperator.ExecutionAction{    using System;    using System.Collections.Generic;    using Bars.B4;    using Bars.B4.Modules.Tasks.Common.Service;    using Bars.Gkh.ExecutionAction;    using Bars.Gkh.RegOperator.Domain.Repository.Wallets;    using Bars.Gkh.RegOperator.Entities;    using Bars.Gkh.RegOperator.Entities.ValueObjects;    using Bars.Gkh.RegOperator.Tasks.Rounding;    /// <summary>    /// Округление значений начислений в ЛС до 2х знаков    /// </summary>    public class RoundingValuesAccrualAction : BaseExecutionAction    {        /// <summary>        /// DomainService лицевых счетов        /// </summary>        public IDomainService<BasePersonalAccount> PersAccDomain { get; set; }        /// <summary>        /// DomainService срезов на период по ЛС        /// </summary>        public IDomainService<PersonalAccountPeriodSummary> PersAccSummaryDomain { get; set; }        /// <summary>        /// DomainService счетов оплат        /// </summary>        public IDomainService<RealityObjectPaymentAccount> RealityObjectPaymentAccountDomain { get; set; }        /// <summary>        /// DomainService трансферов        /// </summary>        public IDomainService<Transfer> TransferDomain { get; set; }        /// <summary>        /// IWalletRepository        /// </summary>        public IWalletRepository WalletRepository { get; set; }        /// <summary>        /// Описание действия        /// </summary>        public override string Description => @"Округление значений начислений в ЛС до 2х знаков.Делается по закрытым периодам.Всего выполняется 4 функции:Функция 1: округление начислений/оплат и перерасчет сальдоФункция 2: Пересчитать значения в карточке ЛС в поляхФункция 3: В паспорте жилого дома, в разделе ""Счет начислений"" сделать обновление данныхФункция 4: В паспорте жилого дома, в разделе ""Счет оплат"" сделать округление значений в поле ""Сумма(руб.)""";        /// <summary>        /// Название для отображения        /// </summary>        public override string Name => "РегОператор - Округление значений начислений в ЛС до 2х знаков";        /// <summary>        /// Менеджер задач        /// </summary>        public ITaskManager TaskManager { get; set; }        /// <summary>        /// Действие        /// </summary>        public override Func<IDataResult> Action => this.Execute;        private BaseDataResult Execute()        {            this.CallCreateTask(new BaseParams());            return new BaseDataResult();        }        /// <summary>        /// Создаем задачу Округление значений начислений в ЛС до 2х знаков        /// </summary>        /// <param name="baseParams"></param>        /// <returns></returns>        public IDataResult CallCreateTask(BaseParams baseParams)        {            return this.TaskManager.CreateTasks(new RoundingValuesTaskProvider(), baseParams);        }        /// <summary>        /// Список идентификаторов для исключения        /// </summary>        /// <returns> HashSet id шников</returns>        protected virtual HashSet<long> GetExcludePersAccs()        {            return new HashSet<long>();        }    }}