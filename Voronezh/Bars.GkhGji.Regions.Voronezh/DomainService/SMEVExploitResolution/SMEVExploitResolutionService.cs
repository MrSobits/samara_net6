using Bars.B4;
using Bars.B4.DataAccess;
using Bars.B4.Modules.FileStorage;
using Bars.B4.Modules.Tasks.Common.Service;
using Bars.B4.Utils;
using Bars.Gkh.Entities;
using Bars.Gkh.Enums;
using Bars.Gkh.Utils;
using Bars.GkhGji.Regions.Voronezh.Entities;
using Bars.GkhGji.Regions.Voronezh.Enums;
using Bars.GkhGji.Regions.Voronezh.SGIO.SMEVExploitResolution;
using SMEV3Library.Entities.GetResponseResponse;
using SMEV3Library.Services;
using System;
using System.IO;
using System.Linq;
using Bars.GkhGji.Regions.BaseChelyabinsk.Enums.SMEV;
using System.Net.Http;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace Bars.GkhGji.Regions.Voronezh.DomainService
{
    public class SMEVExploitResolutionService : ISMEVExploitResolutionService
    {
        #region Constants

        static XNamespace cco = @"urn://ru.sgio.commisioningpermit/1.0.0";
        static XNamespace cmn = @"urn://ru.sgio.commisioningpermit/commons/1.0.0";

        #endregion

        #region Properties

        public IDomainService<SMEVExploitResolution> SMEVExploitResolutionDomain { get; set; }

        public IDomainService<SMEVExploitResolutionFile> SMEVExploitResolutionFileDomain { get; set; }


        #endregion

        #region Fields

        private ISMEV3Service _SMEV3Service;

        private IFileManager _fileManager;


        #endregion

        #region Constructors

        public SMEVExploitResolutionService(IFileManager fileManager, ISMEV3Service SMEV3Service)
        {
            _fileManager = fileManager;
            _SMEV3Service = SMEV3Service;
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Отправка запроса выписки ЕГРЮЛ
        /// </summary>
        /// <param name="requestData"></param>
        /// <param name="indicator"></param>
        /// <returns></returns>
        public bool SendInformationRequest(SMEVExploitResolution requestData, IProgressIndicator indicator = null)
        {
            try
            {
                //Очищаем список файлов
                indicator?.Report(null, 0, "Очистка старых файлов");
                SMEVExploitResolutionFileDomain.GetAll().Where(x => x.SMEVExploitResolution == requestData).ToList().ForEach(x => SMEVExploitResolutionFileDomain.Delete(x.Id));

                //формируем отправляемую xml
                indicator?.Report(null, 10, "Формирование запроса");
                XElement request = GetInformationRequestXML(requestData);
                ChangeState(requestData, RequestState.Formed);

                //
                indicator?.Report(null, 20, "Отправка запроса");
                var requestResult = _SMEV3Service.SendRequestAsyncSGIO(request, null, true).GetAwaiter().GetResult();
                requestData.MessageId = requestResult.MessageId;
                SMEVExploitResolutionDomain.Update(requestData);

                //
                indicator?.Report(null, 80, "Сохранение данных для отладки");
                SaveFile(requestData, requestResult.SendedData, "SendRequestRequest.dat");
                SaveFile(requestData, requestResult.ReceivedData, "SendRequestResponse.dat");

                //
                indicator?.Report(null, 90, "Обработка результата");
                if (requestResult.Error != null)
                {
                    SetErrorState(requestData, $"Ошибка при отправке: {requestResult.Error}");
                    SaveException(requestData, requestResult.Error.Exception);
                }
                else if (requestResult.FaultXML != null)
                {
                    SaveFile(requestData, requestResult.FaultXML, "Fault.xml");
                    SetErrorState(requestData, "Ошибка при обработке сообщения, подробности в файле Fault.xml");
                }
                else if (requestResult.Status != "requestIsQueued")
                {
                    SetErrorState(requestData, "Ошибка при отправке: cервер вернул статус " + requestResult.Status);
                }
                else
                {
                    requestData.RequestState = RequestState.Queued;
                    requestData.Answer = "Поставлено в очередь";
                    SMEVExploitResolutionDomain.Update(requestData);
                    return true;
                }
            }
            catch (HttpRequestException)
            {
                //ошибки связи прокидываем в контроллер
                throw;
            }
            catch (Exception e)
            {
                SaveException(requestData, e);
                SetErrorState(requestData, "SendRequest exception: " + e.Message);
            }

            return false;
        }

        /// <summary>
        /// Обработка ответа
        /// </summary>
        /// <param name="requestData"></param>
        /// <param name="response"></param>
        /// <param name="indicator"></param>
        /// <returns></returns>
        public bool TryProcessResponse(SMEVExploitResolution requestData, GetResponseResponse response, IProgressIndicator indicator = null)
        {
            try
            {
                //
                indicator?.Report(null, 40, "Сохранение данных для отладки");
                SaveFile(requestData, response.SendedData, "GetResponseRequest.dat");
                SaveFile(requestData, response.ReceivedData, "GetResponseResponse.dat");
                //сохраняем все файлы, которые прислал сервер
                try
                {
                    if (response.Attachments != null)
                    {
                        response.Attachments.ForEach(x => SaveFile(requestData, x.FileData, x.FileName));
                    }
                }
                catch(Exception e)
                {
                    
                }

                indicator?.Report(null, 70, "Обработка результата");
                if (response.Error != null)
                {
                    SetErrorState(requestData, $"Ошибка при отправке: {response.Error}");
                    SaveException(requestData, response.Error.Exception);
                    return false;
                }

                //ACK - ставим вдумчиво
              //  _SMEV3Service.GetAckAsyncSGIO(response.MessageId, true).GetAwaiter().GetResult();

                if (response.FaultXML != null)
                {
                    SaveFile(requestData, response.FaultXML, "Fault.xml");
                    SetErrorState(requestData, "Ошибка при обработке сообщения в СМЭВ3, подробности в файле Fault.xml");
                }
                //сервер вернул ошибку?
                else if (response.AsyncProcessingStatus != null)
                {
                    SaveFile(requestData, response.AsyncProcessingStatus, "AsyncProcessingStatus.xml");
                    SetErrorState(requestData, "Ошибка при обработке сообщения в СМЭВ3, подробности в приаттаченом файле AsyncProcessingStatus.xml");
                }
                //сервер отклонил запрос?
                else if (response.RequestRejected != null)
                {
                    SaveFile(requestData, response.RequestRejected, "RequestRejected.xml");
                    SetErrorState(requestData, "Сервер отклонил запрос, подробности в приаттаченом файле RequestRejected.xml");
                }
                //ответ пустой?
                else if (response.MessagePrimaryContent == null)
                {
                    SetErrorState(requestData, "Сервер прислал ответ, в котором нет ни результата, ни ошибки обработки");
                }
                else
                {
                    //разбираем xml, которую прислал сервер
                    indicator?.Report(null, 80, "Разбор содержимого");

                    var SGIOresponse = response.MessagePrimaryContent.Element(cco + "ResponseData");
                    if (SGIOresponse == null)
                    {
                        SetErrorState(requestData, "Данные отсутствуют");
                        return false;
                    }

                    var SGIOresponseData = SGIOresponse.Element(cco + "ResponseData");
                    //if (SGIOresponse.Element(cmn + "ResponseInfo")?.Element(cmn + "Status")?.Value != "1075")
                    //{
                    //    SetErrorState(requestData, "Запрашиваемые сведения не найдены");
                    //    return false;
                    //}

                    var exploitation = SGIOresponse.Element(cco + "Exploitation");
                    if (exploitation == null)
                    {
                        SetErrorState(requestData, "Секция Exploitation отсутствует");
                        return false;
                    }

                    ProcessResponseXML(requestData, exploitation);

                    requestData.RequestState = RequestState.ResponseReceived;
                    requestData.Answer = "Успешно";
                    SMEVExploitResolutionDomain.Update(requestData);
                    return true;
                }
            }
            catch (Exception e)
            {
                SaveException(requestData, e);
                SetErrorState(requestData, "SendInformationRequest exception: " + e.Message);
            }

            return false;
        }     

        private void ProcessResponseXML(SMEVExploitResolution requestData, XElement data)
        {

            requestData.PermitNumber = data.Element(cco + "PermitNumber")?.Value;
            requestData.PermitDate = NullableDateParse(data.Element(cco + "PermitDate")?.Value);
            requestData.IssueOrgan = data.Element(cco + "IssueOrgan")?.Value;

            requestData.ObjectName = data.Element(cco + "Object")?.Element(cco + "ObjectName")?.Value;
            
            var objectAddress = data.Element(cco + "Object")?.Element(cco + "ObjectName");
            if (objectAddress != null)
            {
                requestData.OKATO = objectAddress.Element(cco + "OKATO")?.Value;
                requestData.KLADR = objectAddress.Element(cco + "KLADR")?.Value;
                requestData.PostalCode = objectAddress.Element(cco + "PostalCode")?.Value;
                requestData.Region = objectAddress.Element(cco + "Region")?.Value;
                requestData.Street = string.Join(". ",
                    objectAddress.Element(cco + "Street")?.Attribute("Type")?.Value,
                    objectAddress.Element(cco + "Street")?.Attribute("Name")?.Value);
                requestData.Level1 = string.Join(". ",
                    objectAddress.Element(cco + "Level1")?.Attribute("Type")?.Value,
                    objectAddress.Element(cco + "Level1")?.Attribute("Name")?.Value);
                requestData.Level2 = string.Join(". ",
                    objectAddress.Element(cco + "Level2")?.Attribute("Type")?.Value,
                    objectAddress.Element(cco + "Level2")?.Attribute("Name")?.Value);
            }

            requestData.CadastralNumberZU = data.Element(cco + "Object")?.Element(cco + "CadastralNumberZU")?.Value;
        }

        private DateTime? NullableDateParse(string value)
        {
            if (value == null)
                return null;

            DateTime result;

            return (DateTime.TryParse(value, out result) ? result : (DateTime?)null);
        }

        #endregion

        #region Private methods

        private XElement GetInformationRequestXML(SMEVExploitResolution requestData)
        {
            if (requestData.RequestParamType == RequestParamType.Address)
            {
                RequestDataType request = new RequestDataType
                {
                    ReceiverOKTMO = requestData.Municipality.Oktmo,
                    RequestNumber = requestData.Id.ToString(),
                    RegionCode = "20701000",
                    Sender = new RequestDataSenderType
                    {
                        DepartmentName = "ГОСУДАРСТВЕННАЯ ЖИЛИЩНАЯ ИНСПЕКЦИЯ ВОРОНЕЖСКОЙ ОБЛАСТИ",
                        SendDate = DateTime.Now.ToString("dd.MM.yyyy"),
                        SenderAppointment = requestData.Inspector.Position,
                        SenderFIO = new RequestDataSenderSenderFIOType
                        {
                            First = requestData.Inspector.Fio.Split(" ")[1],
                            Patronymic = requestData.Inspector.Fio.Split(" ")[2],
                            Surname = requestData.Inspector.Fio.Split(" ")[0]
                        }
                    },
                    RequestParam = new RequestDataRequestParamType
                    {
                        Address = requestData.RequestParamTypeValue
                    }
                };
                var result = GetRequestElement(request);
                return result;
            }
            else if (requestData.RequestParamType == RequestParamType.CadastralNumberZU)
            {
                RequestDataType request = new RequestDataType
                {
                    ReceiverOKTMO = requestData.Municipality.Oktmo,
                    RequestNumber = requestData.Id.ToString(),
                    RegionCode = "20701000",
                    Sender = new RequestDataSenderType
                    {
                        DepartmentName = "ГОСУДАРСТВЕННАЯ ЖИЛИЩНАЯ ИНСПЕКЦИЯ ВОРОНЕЖСКОЙ ОБЛАСТИ",
                        SendDate = DateTime.Now.ToString("dd.MM.yyyy"),
                        SenderAppointment = requestData.Inspector.Position,
                        SenderFIO = new RequestDataSenderSenderFIOType
                        {
                            First = requestData.Inspector.Fio.Split(" ")[1],
                            Patronymic = requestData.Inspector.Fio.Split(" ")[2],
                            Surname = requestData.Inspector.Fio.Split(" ")[0]
                        }
                    },
                    RequestParam = new RequestDataRequestParamType
                    {
                        Address = requestData.RequestParamTypeValue
                    }
                };
                var result = GetRequestElement(request);
                return result;
            }
            else
            {
                RequestDataType request = new RequestDataType
                {
                    ReceiverOKTMO = requestData.Municipality.Oktmo,
                    RequestNumber = requestData.Id.ToString(),
                    RegionCode = "20701000",
                    Sender = new RequestDataSenderType
                    {
                        DepartmentName = "ГОСУДАРСТВЕННАЯ ЖИЛИЩНАЯ ИНСПЕКЦИЯ ВОРОНЕЖСКОЙ ОБЛАСТИ",
                        SendDate = DateTime.Now.ToString("dd.MM.yyyy"),
                        SenderAppointment = requestData.Inspector.Position,
                        SenderFIO = new RequestDataSenderSenderFIOType
                        {
                            First = requestData.Inspector.Fio.Split(" ")[1],
                            Patronymic = requestData.Inspector.Fio.Split(" ")[2],
                            Surname = requestData.Inspector.Fio.Split(" ")[0]
                        }
                    },
                    RequestParam = new RequestDataRequestParamType
                    {
                        Address = requestData.RequestParamTypeValue
                    }
                };
                var result = GetRequestElement(request);
                return result;
            }
            //var result = new XElement(cco + "RequestData",
            //    new XElement(cmn + "RegionCode", "20701000"),
            //    new XElement(cmn + "Sender",
            //        new XElement(cmn + "DepartmentName", "ГОСУДАРСТВЕННАЯ ЖИЛИЩНАЯ ИНСПЕКЦИЯ ВОРОНЕЖСКОЙ ОБЛАСТИ"),
            //        new XElement(cmn + "SenderFIO",
            //             new XElement(cmn + "Surname", requestData.Inspector.Fio.Split(" ")[0]),
            //             new XElement(cmn + "First", requestData.Inspector.Fio.Split(" ")[1]),
            //             new XElement(cmn + "Patronymic", requestData.Inspector.Fio.Split(" ")[2])
            //        ),
            //        new XElement(cmn + "SenderAppointment", requestData.Inspector.Position),
            //        new XElement(cmn + "SendDate", DateTime.Now.ToString("dd.MM.yyyy"))
            //    ),
            //    new XElement(cmn + "RequestParam",
            //        requestData.RequestParamType == RequestParamType.CadastralNumberZU ?
            //        new XElement(cmn + "CadastralNumberZU", requestData.RequestParamTypeValue) :
            //         requestData.RequestParamType == RequestParamType.Address ?
            //         new XElement(cmn + "Address", requestData.RequestParamTypeValue):
            //        new XElement(cmn + "PermitNumber", requestData.RequestParamTypeValue)
            //        ),
            //    new XElement(cmn + "RequestNumber", requestData.Id),
            //    new XElement(cmn + "ReceiverOKTMO", requestData.Municipality.Oktmo)
            //    );

            //result.SetAttributeValue(XNamespace.Xmlns + "cco", cco);
            //result.SetAttributeValue(XNamespace.Xmlns + "cmn", cmn);
            //return result;
        }

        private XElement GetRequestElement(RequestDataType request)
        {
            using (var memoryStream = new MemoryStream())
            {
                using (TextWriter streamWriter = new StreamWriter(memoryStream))
                {
                    var xmlSerializer = new XmlSerializer(typeof(RequestDataType));
                    xmlSerializer.Serialize(streamWriter, request);
                    return XElement.Parse(Encoding.UTF8.GetString(memoryStream.ToArray()));
                }
            }
        }

        private void ChangeState(SMEVExploitResolution requestData, RequestState state)
        {
            requestData.RequestState = state;
            SMEVExploitResolutionDomain.Update(requestData);
        }

        private void SetErrorState(SMEVExploitResolution requestData, string error)
        {
            requestData.RequestState = RequestState.Error;
            requestData.Answer = error;
            SMEVExploitResolutionDomain.Update(requestData);
        }

        private void SaveFile(SMEVExploitResolution request, Stream data, string fileName)
        {
            //сохраняем ошибку
            SMEVExploitResolutionFileDomain.Save(new SMEVExploitResolutionFile
            {
                ObjectCreateDate = DateTime.Now,
                ObjectEditDate = DateTime.Now,
                ObjectVersion = 1,
                SMEVExploitResolution = request,
                SMEVFileType = SMEVFileType.Request,
                FileInfo = _fileManager.SaveFile(data, fileName)
            });
        }

        private void SaveFile(SMEVExploitResolution request, byte[] data, string fileName)
        {
            //сохраняем отправленный пакет
            SMEVExploitResolutionFileDomain.Save(new SMEVExploitResolutionFile
            {
                ObjectCreateDate = DateTime.Now,
                ObjectEditDate = DateTime.Now,
                ObjectVersion = 1,
                SMEVExploitResolution = request,
                SMEVFileType = SMEVFileType.Request,
                FileInfo = _fileManager.SaveFile(fileName, data)
            });
            request.AnswerFile = _fileManager.SaveFile(fileName, data);
            SMEVExploitResolutionDomain.Update(request);
        }

        private void SaveFile(SMEVExploitResolution request, XElement data, string fileName)
        {
            MemoryStream stream = new MemoryStream();
            data.Save(stream);

            //сохраняем ошибку
            SMEVExploitResolutionFileDomain.Save(new SMEVExploitResolutionFile
            {
                ObjectCreateDate = DateTime.Now,
                ObjectEditDate = DateTime.Now,
                ObjectVersion = 1,
                SMEVExploitResolution = request,
                SMEVFileType = SMEVFileType.Request,
                FileInfo = _fileManager.SaveFile(stream, fileName)
            });
        }

        private void SaveException(SMEVExploitResolution request, Exception exception)
        {
            if (exception == null)
                return;

            SMEVExploitResolutionFileDomain.Save(new SMEVExploitResolutionFile
            {
                ObjectCreateDate = DateTime.Now,
                ObjectEditDate = DateTime.Now,
                ObjectVersion = 1,
                SMEVExploitResolution = request,
                SMEVFileType = SMEVFileType.Request,
                FileInfo = _fileManager.SaveFile("Exception.txt", ($"{exception.GetType().ToString()}\n{exception.Message}\n{exception.StackTrace}").GetBytes())
            });
        }
        #endregion
    }
}
