// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestFeaturesFilling
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("удаления документов из оснований ПИРа")]
    public partial class УдаленияДокументовИзОснованийПИРаFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "deleteDocs_BasesPir.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "удаления документов из оснований ПИРа", "Претензионная работа - Основания претензионной работы - Подрядчики, нарушившие ус" +
                    "ловия договора\r\nПретензионная работа - Основания претензионной работы - Реестр н" +
                    "еплательщиков", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line 9
testRunner.Given("добавлена запись в разделе Подрядчики, нарушившие условия договора со статусом \"Т" +
                    "ребует формирования искового заявления\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 10
testRunner.Given("добавлена запись в разделе Реестр неплательщиков со статусом \"Требует формировани" +
                    "я искового заявления\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("удаление документов из основания в реестре \"Реестр неплательщиков\"")]
        [NUnit.Framework.TestCaseAttribute("Уведомление", null)]
        [NUnit.Framework.TestCaseAttribute("Претенезия", null)]
        public virtual void УдалениеДокументовИзОснованияВРеестреРеестрНеплательщиков(string документ, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("удаление документов из основания в реестре \"Реестр неплательщиков\"", exampleTags);
#line 13
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 14
testRunner.Given("пользователь указывает в настройках \"Настройка реестра неплательщиков\" в поле \"До" +
                    "кумент уведомления\" значение \"Формировать\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 15
testRunner.And("пользователь указывает в настройках \"Настройка реестра неплательщиков\" в поле \"До" +
                    "кумент претензии\" значение \"Формировать\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 16
testRunner.Given(string.Format("в карточке основания в Реестре неплательщиков пользователь добавляет документ \"{0" +
                        "}\"", документ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 17
testRunner.When(string.Format("пользователь удаляет этот документ \"{0}\" из карточки основания", документ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 18
testRunner.Then(string.Format("этот \"{0}\" отсутствует в карточке основания", документ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("удаление документов из основания в реестре \"Подрядчики, нарушившие условия догово" +
            "ра\"")]
        [NUnit.Framework.TestCaseAttribute("Уведомление", null)]
        [NUnit.Framework.TestCaseAttribute("Претенезия", null)]
        [NUnit.Framework.TestCaseAttribute("Акт выявления нарушений", null)]
        public virtual void УдалениеДокументовИзОснованияВРеестреПодрядчикиНарушившиеУсловияДоговора(string документ, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("удаление документов из основания в реестре \"Подрядчики, нарушившие условия догово" +
                    "ра\"", exampleTags);
#line 26
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 27
testRunner.Given("пользователь указывает в настройках \"Настройки реестра подрядчиков\" в поле \"Акт в" +
                    "ыявления нарушений\" значение \"Формировать\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 28
testRunner.And("пользователь указывает в настройках \"Настройки реестра подрядчиков\" в поле \"Докум" +
                    "ент уведомления\" значение \"Формировать\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 29
testRunner.Given(string.Format("в карточке основания в Подрядчиках, нарушивших условия договора пользователь доба" +
                        "вляет документ \"{0}\"", документ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 30
testRunner.When(string.Format("пользователь удаляет этот документ \"{0}\" из карточки основания", документ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 31
testRunner.Then(string.Format("этот \"{0}\" отсутствует в карточке основания", документ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("удаление документа Исковое заявление из реестров \"Реестр неплательщиков\" и \"Подря" +
            "дчики, нарушившие условия договора\"")]
        [NUnit.Framework.TestCaseAttribute("Реестр неплательщиков", null)]
        [NUnit.Framework.TestCaseAttribute("Подрядчики, нарушившие условия договора", null)]
        public virtual void УдалениеДокументаИсковоеЗаявлениеИзРеестровРеестрНеплательщиковИПодрядчикиНарушившиеУсловияДоговора(string раздел, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("удаление документа Исковое заявление из реестров \"Реестр неплательщиков\" и \"Подря" +
                    "дчики, нарушившие условия договора\"", exampleTags);
#line 39
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 40
testRunner.Given("в карточке основания в разделе \"<раздел>\" пользователь добавляет документ \"Исково" +
                    "е заявление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 41
testRunner.Given("у этого искового заявления количество документов = 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 42
testRunner.And("у этого искового заявления количество претензий в суд = 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 43
testRunner.When("пользователь удаляет это исковое заявление", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 44
testRunner.Then("это исковое заявление отсутствует в карточке основания", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачное удаление документа Исковое заявление из реестров \"Реестр неплательщиков" +
            "\" и \"Подрядчики, нарушившие условия договора\"")]
        [NUnit.Framework.TestCaseAttribute("Реестр неплательщиков", null)]
        [NUnit.Framework.TestCaseAttribute("Подрядчики, нарушившие условия договора", null)]
        public virtual void НеудачноеУдалениеДокументаИсковоеЗаявлениеИзРеестровРеестрНеплательщиковИПодрядчикиНарушившиеУсловияДоговора(string раздел, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачное удаление документа Исковое заявление из реестров \"Реестр неплательщиков" +
                    "\" и \"Подрядчики, нарушившие условия договора\"", exampleTags);
#line 52
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 53
testRunner.Given("в карточке основания в разделе \"<раздел>\" пользователь добавляет документ \"Исково" +
                    "е заявление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 54
testRunner.And("добавляет в Исковое заявление запись по документу", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 55
testRunner.And("добавляет в Исковое заявление запись по претензии в суд", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 56
testRunner.When("пользователь удаляет это исковое заявление", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 57
testRunner.Then("это исковое заявление присутствует в карточке основания", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 58
testRunner.And("падает ошибка с текстом \"У документа есть связанные документы. Удаление невозможн" +
                    "о. Для удаления документа удалите связанные документы.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
