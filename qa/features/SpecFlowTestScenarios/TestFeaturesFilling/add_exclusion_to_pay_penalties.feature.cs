// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestFeaturesFilling
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("тесткейсы для добавления исключения к расчету пеней в разделе \"Параметры начислен" +
        "ия пени\"")]
    public partial class ТесткейсыДляДобавленияИсключенияКРасчетуПенейВРазделеПараметрыНачисленияПениFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "add_exclusion_to_pay_penalties.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "тесткейсы для добавления исключения к расчету пеней в разделе \"Параметры начислен" +
                    "ия пени\"", "Региональный фонд - Настройки - Параметры начисления пени", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DecisionType",
                        "DateStart"});
            table1.AddRow(new string[] {
                        "Специальный счет",
                        "10.01.2015"});
            table1.AddRow(new string[] {
                        "Счет регионального оператора",
                        "11.01.2015"});
#line 6
testRunner.Given("добавлен расчет пеней", ((string)(null)), table1, "Дано ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "region",
                        "place",
                        "street",
                        "houseNumber"});
            table2.AddRow(new string[] {
                        "kamchatka",
                        "Камчатский край, Алеутский р-н, с. Никольское",
                        "ул. 50 лет Октября",
                        "75"});
#line 11
testRunner.And("добавлен жилой дом", ((string)(null)), table2, "И ");
#line 15
testRunner.And("у этого дома заполнено поле Вид дома \"Многоквартирный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoomNum",
                        "Area",
                        "LivingArea",
                        "Type",
                        "OwnershipType"});
            table3.AddRow(new string[] {
                        "1",
                        "51",
                        "35",
                        "Жилое",
                        "Частная"});
#line 16
testRunner.And("у этого дома добавлено помещение", ((string)(null)), table3, "И ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "OwnerType",
                        "Surname",
                        "FirstName"});
            table4.AddRow(new string[] {
                        "Счет физ.лица",
                        "1",
                        "1"});
#line 20
testRunner.And("добавлен абонент с типом Счет физ.лица", ((string)(null)), table4, "И ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Contragent"});
            table5.AddRow(new string[] {
                        "111"});
#line 24
testRunner.And("добавлен абонент с типом Счет юр.лица", ((string)(null)), table5, "И ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "OpenDate",
                        "RealityObject",
                        "RoomInfo"});
            table6.AddRow(new string[] {
                        "01.01.2015",
                        "с. Никольское, ул. 50 лет Октября, д. 75",
                        "1"});
#line 28
testRunner.And("у этого абонента с типом Счет физ.лица добавлено помещение", ((string)(null)), table6, "И ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление исключения к расчету пеней")]
        public virtual void УспешноеДобавлениеИсключенияКРасчетуПеней()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление исключения к расчету пеней", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 34
testRunner.When("пользователь к этому расчету пеней с типом Специальный счет добавляет исключение " +
                    "с адресом \"с. Никольское, ул. 50 лет Октября, д. 75, кв. 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 35
testRunner.Then("запись по этому исключению присутствует у этого расчета пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное удаление исключения из расчета пеней")]
        public virtual void УспешноеУдалениеИсключенияИзРасчетаПеней()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное удаление исключения из расчета пеней", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 38
testRunner.When("пользователь к этому расчету пеней с типом Специальный счет добавляет исключение " +
                    "с адресом \"с. Никольское, ул. 50 лет Октября, д. 75, кв. 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 39
testRunner.And("пользователь из этого расчета пеней с типом Специальный счет удаляет исключение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 40
testRunner.Then("запись по этому исключению отсутствует у этого расчета пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("отсутствие дублирования исключении в расчете пеней")]
        public virtual void ОтсутствиеДублированияИсключенииВРасчетеПеней()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("отсутствие дублирования исключении в расчете пеней", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 43
testRunner.When("пользователь к этому расчету пеней с типом Специальный счет добавляет исключение " +
                    "с адресом \"с. Никольское, ул. 50 лет Октября, д. 75, кв. 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 44
testRunner.And("пользователь к этому расчету пеней с типом Специальный счет добавляет исключение " +
                    "с адресом \"с. Никольское, ул. 50 лет Октября, д. 75, кв. 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 45
testRunner.Then("запись по этому исключению присутствует у этого расчета пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 46
testRunner.And("количество записей по этому исключению = 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
