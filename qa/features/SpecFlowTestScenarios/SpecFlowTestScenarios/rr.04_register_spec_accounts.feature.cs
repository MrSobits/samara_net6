// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("доработка отчета \"04_Реестр специальных счетов\"")]
    public partial class ДоработкаОтчета04_РеестрСпециальныхСчетовFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "rr.04_register_spec_accounts.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "доработка отчета \"04_Реестр специальных счетов\"", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
testRunner.Given("в Отчеты - Отчеты - Долгосрочная Республиканская адресная программа капитального " +
                    "ремонта есть отчет \"04_Реестр специальных счетов\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 6
testRunner.Given("задан параметр отчета \"Дата отчета\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 7
testRunner.Given("задан параметр отчета \"Муниципальные образования\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 8
testRunner.Given("в отчет тянутся данные из реестра Капитальный ремонт/Долгосрочная программа/Верси" +
                    "и программы", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Описание нового параметра \"Наличие в ДПКР\"")]
        [NUnit.Framework.TestCaseAttribute("Да", "все", "которые есть в основной версии программы", null)]
        [NUnit.Framework.TestCaseAttribute("Нет", "\"Исправные\" и \"Ветхие\"", "которых нет в основной версии программы", null)]
        [NUnit.Framework.TestCaseAttribute("Не задано", "\"Исправные\" и \"Ветхие\"", "которые есть и которых нет в основной версии", null)]
        public virtual void ОписаниеНовогоПараметраНаличиеВДПКР(string параметр, string тип_Мкд, string условие_Версии, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Описание нового параметра \"Наличие в ДПКР\"", exampleTags);
#line 11
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 12
testRunner.Given("доступен параметр \"Наличие в ДПКР\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 13
testRunner.Given("по умолчанию параметр \"Наличие в ДПКР\" заполнен значением \"Не задано\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 14
testRunner.Given("параметр \"Наличие в ДПКР\" необязателен для заполнения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 15
testRunner.When(string.Format("выбираю в параметре \"Наличие в ДПКР\" значение {0}", параметр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 16
testRunner.And("нажимаю кнопку \"Печать\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 17
testRunner.And("после формирования отчета нажимаю кнопку \"Скачать\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 18
testRunner.And("открываю скаченный файл", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 19
testRunner.Then(string.Format("в отчет выводятся мкд с типом {0} с условием по версии программы {1}", тип_Мкд, условие_Версии), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
