// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("раздел Уведомления заявителю")]
    public partial class РазделУведомленияЗаявителюFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "notification_to_applicant.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "раздел Уведомления заявителю", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("добавление записи")]
        [NUnit.Framework.TestCaseAttribute("1", "тест", "тест", null)]
        public virtual void ДобавлениеЗаписи(string код, string темаСообщения, string шаблонПисьма, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("добавление записи", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.When(string.Format("пользователь добавляет запись и заполняет поле \"{0}\"", код), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 7
testRunner.And(string.Format("заполняет поле \"{0}\"", темаСообщения), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 8
testRunner.And(string.Format("заполняет поле \"{0}\"", шаблонПисьма), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 9
testRunner.And("сохраняет запись", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 10
testRunner.Then("в реестре появляется новая запись", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("обновление реестра")]
        [NUnit.Framework.TestCaseAttribute("Код", null)]
        [NUnit.Framework.TestCaseAttribute("Тема письма", null)]
        public virtual void ОбновлениеРеестра(string аттрибут, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("обновление реестра", exampleTags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.When("пользователь обновляет реестр", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 20
testRunner.Then(string.Format("в реестре обновляется количество записей и информация по аттрибутам \"{0}\"", аттрибут), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("отправка уведомления заявителю при смене исполнителя в поле \"Тип контрагента\"")]
        public virtual void ОтправкаУведомленияЗаявителюПриСменеИсполнителяВПолеТипКонтрагента()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("отправка уведомления заявителю при смене исполнителя в поле \"Тип контрагента\"", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.When("пользователь в обращении меняет значение в поле \"Тип контрагента\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 30
testRunner.Then("на эл.адрес, указанный в карточке обращения в поле \"E-mail\", отправляется уведомл" +
                    "ение с текстом", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 31
testRunner.And("тема уведомления = Назначение исполнителя по обращению", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 32
testRunner.And("текст уведомления \"текст уведомления\" = тексту в шаблоне \"Шаблон письма\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("отправка уведомления заявителю при создании ответа на обращение в Общих сведениях" +
            "")]
        public virtual void ОтправкаУведомленияЗаявителюПриСозданииОтветаНаОбращениеВОбщихСведениях()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("отправка уведомления заявителю при создании ответа на обращение в Общих сведениях" +
                    "", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.When("пользователь в общих сведениях обращения заполняет поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 37
testRunner.And("в общих сведениях обращения заполняет поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 38
testRunner.And("меняет статус обращения на статус с признаком = \"Конечный\" и с кодом != \"END\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 39
testRunner.Then("на эл.адрес, указанный в карточке обращения в поле \"E-mail\", отправляется уведомл" +
                    "ение с текстом", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 40
testRunner.And("тема уведомления = Назначение исполнителя по обращению", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 41
testRunner.And("текст уведомления \"текст уведомления\" = тексту в шаблоне \"Шаблон письма\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("отправка уведомления заявителю при создании ответа на обращение в Дополнительных " +
            "вопросах")]
        public virtual void ОтправкаУведомленияЗаявителюПриСозданииОтветаНаОбращениеВДополнительныхВопросах()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("отправка уведомления заявителю при создании ответа на обращение в Дополнительных " +
                    "вопросах", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.When("пользователь в дополнительных вопросах обращения создает запись вопроса", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 46
testRunner.And("заполняет у вопроса поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 47
testRunner.And("заполняет у вопроса поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 48
testRunner.And("меняет статус обращения на статус с признаком = \"Конечный\" и с кодом != \"END\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 49
testRunner.Then("на эл.адрес, указанный в карточке обращения в поле \"E-mail\", отправляется уведомл" +
                    "ение с текстом", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 50
testRunner.And("тема уведомления = Назначение исполнителя по обращению", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 51
testRunner.And("текст уведомления \"текст уведомления\" = тексту в шаблоне \"Шаблон письма\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачная отправка уведомления при создании ответа на обращение в Общих сведениях" +
            "")]
        public virtual void НеудачнаяОтправкаУведомленияПриСозданииОтветаНаОбращениеВОбщихСведениях()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачная отправка уведомления при создании ответа на обращение в Общих сведениях" +
                    "", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
testRunner.When("пользователь в общих сведениях обращения создает запись вопроса", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 56
testRunner.And("заполняет у вопроса поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 57
testRunner.And("заполняет у вопроса поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 58
testRunner.And("меняет статус обращения на статус с признаком != \"Конечный\" или с кодом = \"END\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 59
testRunner.Then("уведомление не отправляется", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачная отправка уведомления при создании ответа на обращение в Дополнительных " +
            "вопросах")]
        public virtual void НеудачнаяОтправкаУведомленияПриСозданииОтветаНаОбращениеВДополнительныхВопросах()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачная отправка уведомления при создании ответа на обращение в Дополнительных " +
                    "вопросах", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
testRunner.When("пользователь в дополнительных вопросах обращения создает запись вопроса", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 64
testRunner.And("заполняет у вопроса поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 65
testRunner.And("заполняет у вопроса поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 66
testRunner.And("меняет статус обращения на статус с признаком != \"Конечный\" или с кодом = \"END\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 67
testRunner.Then("уведомление не отправляется", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
