// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Реестр документов ПИР")]
    public partial class РеестрДокументовПИРFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "pir_register_docs.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "Реестр документов ПИР", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("условия выбора переменной Акт выявления нарушений в Типе документа")]
        public virtual void УсловияВыбораПеременнойАктВыявленияНарушенийВТипеДокумента()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("условия выбора переменной Акт выявления нарушений в Типе документа", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.When("в разделе \"Настройка реестра подрядчиков\" в поле \"Акт выявления нарушений\" стоит " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 7
testRunner.And("пользователь в реестре документов ПИР выбирает тип документа = \"Акты выявления на" +
                    "рушений\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 8
testRunner.Then("в реестр выводятся записи, у которых тип документа = \"Акты выявления нарушений\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 9
testRunner.When("в разделе \"Настройка реестра подрядчиков\" в поле \"Акт выявления нарушений\" не сто" +
                    "ит значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 10
testRunner.Then("в списке аттрибутов для выбора значения в поле Тип документа нет аттбибута \"Акты " +
                    "выявления нарушений\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("условия выбора переменной Уведомление в Типе документа")]
        public virtual void УсловияВыбораПеременнойУведомлениеВТипеДокумента()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("условия выбора переменной Уведомление в Типе документа", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
testRunner.When("в разделе \"Настройка реестра подрядчиков\" в поле \"Документ уведомление\" стоит зна" +
                    "чение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 15
testRunner.And("(или) в разделе \"Настройка реестра неплательщиков\" в поле \"Документ уведомление\" " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 16
testRunner.And("пользователь в реестре документов ПИР выбирает тип документа = \"Уведомление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 17
testRunner.Then("в реестр выводятся записи, у которых тип документа = \"Уведомление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 18
testRunner.When("в разделе \"Настройка реестра подрядчиков\" в поле \"Документ уведомление\" не стоит " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 19
testRunner.And("(или) в разделе \"Настройка реестра неплательщиков\" в поле \"Документ уведомление\" " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 20
testRunner.Then("в списке аттрибутов для выбора значения в поле Тип документа нет аттбибута \"Уведо" +
                    "мление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("фильтрация записей в реестре документов ПИH при выборе типа документа")]
        [NUnit.Framework.TestCaseAttribute("Претензия", null)]
        [NUnit.Framework.TestCaseAttribute("Исковое заявление", null)]
        public virtual void ФильтрацияЗаписейВРеестреДокументовПИHПриВыбореТипаДокумента(string типДокумента, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("фильтрация записей в реестре документов ПИH при выборе типа документа", exampleTags);
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
testRunner.When(string.Format("пользователь в реестре документов ПИР выбирает тип документа = \"{0}\"", типДокумента), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 25
testRunner.Then(string.Format("в реестр выводятся записи, у которых тип документа = \"{0}\"", типДокумента), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("фильтрация записей реестра по фильтрам \"Период с, по\", \"Адрес\"")]
        [NUnit.Framework.TestCaseAttribute("Акты выявления нарушений", "Дата составления", null)]
        [NUnit.Framework.TestCaseAttribute("Уведомление", "Дата формирования", null)]
        [NUnit.Framework.TestCaseAttribute("Претензия", "Дата формирования", null)]
        [NUnit.Framework.TestCaseAttribute("Исковое заявление", "Дата формирования", null)]
        public virtual void ФильтрацияЗаписейРеестраПоФильтрамПериодСПоАдрес(string типДокумента, string аттрибут, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("фильтрация записей реестра по фильтрам \"Период с, по\", \"Адрес\"", exampleTags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
testRunner.Given("в разделе \"Настройка реестра подрядчиков\" в поле \"Акт выявления нарушений\" стоит " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 35
testRunner.Given("в разделе \"Настройка реестра подрядчиков\" в поле \"Документ уведомление\" стоит зна" +
                    "чение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 36
testRunner.Given("(или) в разделе \"Настройка реестра неплательщиков\" в поле \"Документ уведомление\" " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 37
testRunner.When(string.Format("пользователь в реестре документов ПИР выбирает тип документа = \"{0}\"", типДокумента), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 38
testRunner.And("в фильтре \"Период с\" выбирает значение \"01.01.2015\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 39
testRunner.And("в фильтре \"по\" выбирает значение \"11.03.2015\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 40
testRunner.And("в фильтре \"фильтр Адрес\" выбирает адрес \"адрес\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 41
testRunner.Then(string.Format("в реестр выводятся записи, у которых тип документа = \"{0}\"", типДокумента), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 42
testRunner.And(string.Format("у записей значение в аттрибуте \"{0}\" <= значению из фильтра \"по\"", аттрибут), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 43
testRunner.And(string.Format("у записей значение в аттрибуте \"{0}\" >= значению из фильтра \"Период с\"", аттрибут), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 44
testRunner.And("у записей значение в поле \"Адрес записи\" = значение из фильтра \"фильтр Адрес\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("выгрузка в Excel")]
        public virtual void ВыгрузкаВExcel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("выгрузка в Excel", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
testRunner.When("пользователь в реестре документов ПИР производит вызов функции выгрузки в Excel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 56
testRunner.Then("скачивается файл Excel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("вывод полей для всех типов документов")]
        [NUnit.Framework.TestCaseAttribute("Акты выявления нарушений", null)]
        [NUnit.Framework.TestCaseAttribute("Уведомление", null)]
        [NUnit.Framework.TestCaseAttribute("Претензия", null)]
        [NUnit.Framework.TestCaseAttribute("Исковое заявление", null)]
        public virtual void ВыводПолейДляВсехТиповДокументов(string типДокумента, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("вывод полей для всех типов документов", exampleTags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
testRunner.Given("в разделе \"Настройка реестра подрядчиков\" в поле \"Акт выявления нарушений\" стоит " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 61
testRunner.Given("в разделе \"Настройка реестра подрядчиков\" в поле \"Документ уведомление\" стоит зна" +
                    "чение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 62
testRunner.Given("(или) в разделе \"Настройка реестра неплательщиков\" в поле \"Документ уведомление\" " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 63
testRunner.When("пользователь заходит в реестр документов ПИР", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 64
testRunner.And(string.Format("выбирает тип документа = \"{0}\"", типДокумента), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 65
testRunner.Then("в списке аттрибутов есть аттрибут \"Тип основания\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 66
testRunner.And("в списке аттрибутов есть аттрибут \"Основание\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 67
testRunner.And("в списке аттрибутов есть аттрибут \"Муниципальный район\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 68
testRunner.And("в списке аттрибутов есть аттрибут \"Адрес\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 69
testRunner.When("документ тянется из реестра \"Подрядчики, нарушившие условия договора\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 70
testRunner.Then("в аттрибуте \"Тип основания\" = \"Подрядчики, нарушившие условия договора\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 71
testRunner.When("документ тянется из реестра \"Реестр неплательщиков\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 72
testRunner.Then("в аттрибуте \"Тип основания\" = \"Реестр неплательщиков\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 73
testRunner.When("в аттрибуте \"Тип основания\" = \"Подрядчики, нарушившие условия договора\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 74
testRunner.Then("в аттрибуте \"Основание\" = Договор № \"номер договор \" от \"дата договора\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 75
testRunner.When("в аттрибуте \"Тип основания\" = \"Реестр неплательщиков\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 76
testRunner.Then("в аттрибуте \"Основание\" = ЛС № \"номер лицевого счета\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("вывод поле для Тип документа = Акт выявления нарушений")]
        public virtual void ВыводПолеДляТипДокументаАктВыявленияНарушений()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("вывод поле для Тип документа = Акт выявления нарушений", ((string[])(null)));
#line 86
this.ScenarioSetup(scenarioInfo);
#line 87
testRunner.When("в разделе \"Настройка реестра подрядчиков\" в поле \"Акт выявления нарушений\" стоит " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 88
testRunner.And("пользователь в реестре документов ПИР выбирает тип документа = \"Акты выявления на" +
                    "рушений\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 89
testRunner.Then("в реестр выводятся записи, у которых тип документа = \"Акты выявления нарушений\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 90
testRunner.And("для каждой записи для аттрибута \"Дата составления\" заполнено значение из аттрибут" +
                    "а \"Дата составления\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 91
testRunner.And("для каждой записи для аттрибута \"Факт подписания\" заполнено значение из аттрибута" +
                    " \"Факт подписания\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("вывод поле для Тип документа = Уведомление")]
        public virtual void ВыводПолеДляТипДокументаУведомление()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("вывод поле для Тип документа = Уведомление", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
testRunner.When("в разделе \"Настройка реестра подрядчиков\" в поле \"Документ уведомление\" стоит зна" +
                    "чение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 96
testRunner.And("(или) в разделе \"Настройка реестра неплательщиков\" в поле \"Документ уведомление\" " +
                    "значение = Формировать", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 97
testRunner.And("пользователь в реестре документов ПИР выбирает тип документа = \"Уведомление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 98
testRunner.Then("в реестр выводятся записи, у которых тип документа = \"Уведомление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 99
testRunner.And("для каждой записи для аттрибута \"Дата формирования\" заполнено значение из аттрибу" +
                    "та \"Дата формирования\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 100
testRunner.And("для каждой записи для аттрибута \"Дата отправки\" заполнено значение из аттрибута \"" +
                    "Дата отправки\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("вывод поле для Тип документа = Претензия")]
        public virtual void ВыводПолеДляТипДокументаПретензия()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("вывод поле для Тип документа = Претензия", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 104
testRunner.When("пользователь в реестре документов ПИР выбирает тип документа = \"Претензия\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 105
testRunner.Then("в реестр выводятся записи, у которых тип документа = \"Претензия\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 106
testRunner.And("для каждой записи для аттрибута \"Дата формирования\" заполнено значение из аттрибу" +
                    "та \"Дата формирования\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 107
testRunner.And("для каждой записи для аттрибута \"Дата рассмотрения\" заполнено значение из аттрибу" +
                    "та \"Дата рассмотрения\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 108
testRunner.And("для каждой записи для аттрибута \"Сумма претензии (основной дог) (руб.)\" заполнено" +
                    " значение из аттрибута \"Сумма претензии (основной дог) (руб.)\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 109
testRunner.And("для каждой записи для аттрибута \"Пени (руб.)\" заполнено значение из аттрибута \"Пе" +
                    "ни (руб.)\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("вывод поле для Тип документа = Исковое заявление")]
        public virtual void ВыводПолеДляТипДокументаИсковоеЗаявление()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("вывод поле для Тип документа = Исковое заявление", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
testRunner.When("пользователь в реестре документов ПИР выбирает тип документа = \"Исковое заявление" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 114
testRunner.Then("в реестр выводятся записи, у которых тип документа = \"Исковое заявление\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 115
testRunner.And("для каждой записи для аттрибута \"Дата формирования\" заполнено значение из аттрибу" +
                    "та \"Дата формирования\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 116
testRunner.And("для каждой записи для аттрибута \"Дата рассмотрения\" заполнено значение из аттрибу" +
                    "та \"Дата рассмотрения\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 117
testRunner.And("для каждой записи для аттрибута \"Номер заявления\" заполнено значение из аттрибута" +
                    " \"Номер заявления\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 118
testRunner.And("для каждой записи для аттрибута \"Дата заявления\" заполнено значение из аттрибута " +
                    "\"Дата заявления\" из формы акта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
