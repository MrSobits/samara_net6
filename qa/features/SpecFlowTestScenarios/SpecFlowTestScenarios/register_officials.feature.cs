// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Доработки к Реестру должностных лиц")]
    public partial class ДоработкиКРееструДолжностныхЛицFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "register_officials.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "Доработки к Реестру должностных лиц", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("вывод места работы в одноименный столбец при условии одного места работы")]
        [NUnit.Framework.TestCaseAttribute("реестр должностных лиц", null)]
        [NUnit.Framework.TestCaseAttribute("Заявки на допуск к экзамену", null)]
        public virtual void ВыводМестаРаботыВОдноименныйСтолбецПриУсловииОдногоМестаРаботы(string реестр, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("вывод места работы в одноименный столбец при условии одного места работы", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.When(string.Format("пользователь заходит в реестр \"{0}\"", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 8
testRunner.Then("в списке аттрибутов есть аттрибут \"Место работы\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 9
testRunner.When("у должностного лица в карточке должностного лица есть \"Место работы\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 10
testRunner.And("у места работы поле \"Дата окончания\" не пусто", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 11
testRunner.And("текущая дата \"Текущая дата\" >= \"Дата начала\" и \"Текущая дата\" <= \"Дата окончания\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 12
testRunner.And("по всем условиям проходит только \"1\" организация", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 13
testRunner.Then(string.Format("в реестре \"{0}\" в аттрибут \"Место работы\" выводится значение из поля \"Управляющая" +
                        " организация\" из карточки должностного лица", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 14
testRunner.When("у должностного лица в карточке должностного лица есть \"Место работы\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 15
testRunner.And("у места работы поле \"Дата окончания\" пусто", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 16
testRunner.And("текущая дата \"Текущая дата\" >= \"Дата начала\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 17
testRunner.And("по всем условиям проходит только \"1\" организация", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 18
testRunner.Then(string.Format("в реестре \"{0}\" в аттрибут \"Место работы\" выводится значение из поля \"Управляющая" +
                        " организация\" из карточки должностного лица", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("вывод места работы в одноименный столбец при условии нескольких мест работы")]
        [NUnit.Framework.TestCaseAttribute("реестр должностных лиц", null)]
        [NUnit.Framework.TestCaseAttribute("Заявки на допуск к экзамену", null)]
        public virtual void ВыводМестаРаботыВОдноименныйСтолбецПриУсловииНесколькихМестРаботы(string реестр, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("вывод места работы в одноименный столбец при условии нескольких мест работы", exampleTags);
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
testRunner.When(string.Format("пользователь заходит в реестр \"{0}\"", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 28
testRunner.Then("в списке аттрибутов есть аттрибут \"Место работы\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 29
testRunner.When("у должностного лица в карточке должностного лица есть \"Место работы\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 30
testRunner.And("у места работы поле \"Дата окончания\" не пусто", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 31
testRunner.And("текущая дата \"Текущая дата\" >= \"Дата начала\" и \"Текущая дата\" <= \"Дата окончания\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 32
testRunner.And("по всем условиям проходит организаций > \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 33
testRunner.Then(string.Format("в реестре \"{0}\" в аттрибут \"Место работы\" выводятся через запятую значения из пол" +
                        "я \"Управляющая организация\" из карточки должностного лица", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 34
testRunner.When("у должностного лица в карточке должностного лица есть \"Место работы\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 35
testRunner.And("у места работы поле \"Дата окончания\" пусто", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 36
testRunner.And("текущая дата \"Текущая дата\" >= \"Дата начала\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 37
testRunner.And("по всем условиям проходит организаций > \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 38
testRunner.Then(string.Format("в реестре \"{0}\" в аттрибут \"Место работы\" выводятся через запятую значения из пол" +
                        "я \"Управляющая организация\" из карточки должностного лица", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("проверка фильтра \"Управляющая компания\" на выбор одного УК")]
        [NUnit.Framework.TestCaseAttribute("реестр должностных лиц", null)]
        [NUnit.Framework.TestCaseAttribute("Заявки на допуск к экзамену", null)]
        public virtual void ПроверкаФильтраУправляющаяКомпанияНаВыборОдногоУК(string реестр, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("проверка фильтра \"Управляющая компания\" на выбор одного УК", exampleTags);
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
testRunner.When(string.Format("пользователь заходит в реестр \"{0}\"", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 48
testRunner.And("выбирает несколько УК в фильтре \"Управляющая компания\" и сохраняет выбор", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 49
testRunner.Then("в фильтре выбирается только \"1\" УК", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("проверка вывода в фильтр \"Управляющая компания\" значений с типом = УК")]
        [NUnit.Framework.TestCaseAttribute("реестр должностных лиц", null)]
        [NUnit.Framework.TestCaseAttribute("Заявки на допуск к экзамену", null)]
        public virtual void ПроверкаВыводаВФильтрУправляющаяКомпанияЗначенийСТипомУК(string реестр, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("проверка вывода в фильтр \"Управляющая компания\" значений с типом = УК", exampleTags);
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
testRunner.When(string.Format("пользователь заходит в реестр \"{0}\"", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 59
testRunner.And("выбирает фильтр \"Управляющая компания\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 60
testRunner.Then("в фильтр попадают записи, у которых \"тип управления\" = \"УК\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("проверка выборки записей после фильтрации в фильтре \"Управляющая компания\"")]
        [NUnit.Framework.TestCaseAttribute("реестр должностных лиц", null)]
        [NUnit.Framework.TestCaseAttribute("Заявки на допуск к экзамену", null)]
        public virtual void ПроверкаВыборкиЗаписейПослеФильтрацииВФильтреУправляющаяКомпания(string реестр, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("проверка выборки записей после фильтрации в фильтре \"Управляющая компания\"", exampleTags);
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
testRunner.When(string.Format("пользователь заходит в реестр \"{0}\"", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 70
testRunner.And("отфильтровывает реестр по фильтру \"Управляющая компания\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 71
testRunner.Then(string.Format("в реестр \"{0}\" попадают должностные лица, у которых \"Место работы\" = значению из " +
                        "фильтра \"Управляющая компания\"", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 72
testRunner.And(string.Format("в реестр \"{0}\" попадают должностные лица, у которых текущая дата \"Текущая дата\" >" +
                        "= \"Дата начала\" и \"Текущая дата\" <= \"Дата окончания\"", реестр), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
