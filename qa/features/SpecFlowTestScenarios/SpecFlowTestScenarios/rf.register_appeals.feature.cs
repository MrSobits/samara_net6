// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("добатоки по реестру обращений в ГЖИ")]
    public partial class ДобатокиПоРееструОбращенийВГЖИFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "rf.register_appeals.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "добатоки по реестру обращений в ГЖИ", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
testRunner.Given("в правилах перехода статуса добавлено правило нумерации обращений", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("нумерация обращений с нового года (Челябинск)")]
        [NUnit.Framework.TestCaseAttribute("Черновик", "Присвоение номера", "2050", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Присвоение номера", "Зарегистрирован", "2050", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Зарегистрирован", "Черновик", "2050", "1", null)]
        public virtual void НумерацияОбращенийСНовогоГодаЧелябинск(string статус1, string статус2, string год_Без_Обращений, string номер, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("нумерация обращений с нового года (Челябинск)", exampleTags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 9
testRunner.Given("Пользователь логин \"admin_chelyabinsk\", пароль \"supergkh174\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 10
testRunner.And("тестируемая система \"http://gkh-test.bars-open.ru/dev-chelyabinsk​\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 12
testRunner.When("пользователь создает обращение и заполняет его данными", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 13
testRunner.And("сохраняет обращение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 14
testRunner.And(string.Format("переводит обращение из статуса {0} в статус {1}", статус1, статус2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 15
testRunner.When(string.Format("по указанному в обращении году еще НЕТ обращений {0}", год_Без_Обращений), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 16
testRunner.Then(string.Format("номер обращения начинается с единицы {0}", номер), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("нумерация обращений по порядку (Челябинск)")]
        [NUnit.Framework.TestCaseAttribute("Первое в году", "2050", "без номера", "1", null)]
        [NUnit.Framework.TestCaseAttribute("второе в году", "2050", "1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("третье в году", "2050", "2", "был в ручную проставлен 5", null)]
        [NUnit.Framework.TestCaseAttribute("четвертое в году", "2050", "5", "6", null)]
        public virtual void НумерацияОбращенийПоПорядкуЧелябинск(string обращение, string год_Без_Обращений, string предыдущий_Порядковый_Номер, string номер_Нового_Обращения, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("нумерация обращений по порядку (Челябинск)", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 26
testRunner.Given("Пользователь логин \"admin_chelyabinsk\", пароль \"supergkh174\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 27
testRunner.And("тестируемая система \"http://gkh-test.bars-open.ru/dev-chelyabinsk​\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 28
testRunner.When("пользователь создает обращение и заполняет его данными", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 29
testRunner.And(string.Format("сохраняет обращение {0}", обращение), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 30
testRunner.And("переводит обращение в статус, на котором висит правило присвоения номера", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 31
testRunner.When("по указанному в обращении году уже имеются обращения <год>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 33
testRunner.Then(string.Format("система ищет самый большой порядковый номер {0} из указанного года", предыдущий_Порядковый_Номер), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 34
testRunner.And(string.Format("добавляет к порядковому номеру документа <документ> единицу и присваивает получив" +
                        "шийся номер новому обращению {0}", номер_Нового_Обращения), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("нумерация обращений вручную с клавиатуры (Челябинск)")]
        [NUnit.Framework.TestCaseAttribute("5", "да", "2050", "5", null)]
        [NUnit.Framework.TestCaseAttribute("5", "нет", "2050", "не сохранено", null)]
        public virtual void НумерацияОбращенийВручнуюСКлавиатурыЧелябинск(string номер, string уникально, string год, string сохраненный_Номер, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("нумерация обращений вручную с клавиатуры (Челябинск)", exampleTags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 46
testRunner.Given("Пользователь логин \"admin_chelyabinsk\", пароль \"supergkh174\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 47
testRunner.And("тестируемая система \"http://gkh-test.bars-open.ru/dev-chelyabinsk​\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 48
testRunner.When(string.Format("пользователь создает обращение и вручную вводит \"Номер\" обращения {0}", номер), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 49
testRunner.And("сохраняет обращение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 50
testRunner.When(string.Format("номер обращения уникален {0}", уникально), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 51
testRunner.Then(string.Format("система сохраняет внесенное вручную значение номера обращения {0}", сохраненный_Номер), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 52
testRunner.When(string.Format("номер обращения неуникален {0}", уникально), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 53
testRunner.Then("система не сохраняет внесенное вручную значение номера обращения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 54
testRunner.And("выдается ошибка \"Имеется обращение с данным номером\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 55
testRunner.When("пользователь редактирует имеющееся обращение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 56
testRunner.And(string.Format("меняет в нем номер обращения на уже имеющийся в системе {0} по году {1}", уникально, год), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 57
testRunner.And("сохраняет обращение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 58
testRunner.Then("система не сохраняет внесенное вручную значение номера обращения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 59
testRunner.And("выдается ошибка \"Имеется обращение с данным номером\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Автоматическая нумерация ответа на обращение")]
        public virtual void АвтоматическаяНумерацияОтветаНаОбращение()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Автоматическая нумерация ответа на обращение", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 69
testRunner.Given("есть хотя бы одна запись с обращением", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 70
testRunner.Given("открыта карточка обращения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 71
testRunner.Given("в карточке обращения открыта вкладка \"Ответы\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 72
testRunner.When("добавляю ответ на обращение по кнопке \"Добавить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 73
testRunner.And("выводится форма заполнения ответа", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 74
testRunner.And("сохраняю ответ на обращение по кнопке \"Сохранить\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 75
testRunner.Then("происходит автоматическая нумерация ответа на обращение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 76
testRunner.And("ответу присваевается номер в поле \"Номер документа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 77
testRunner.And("формат номера документа вида \"Ож-хх–yy\", например \"Ож-06-241\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Проверка перевода статуса обращения на конечный с пустыми полями \"Описание\" или \"" +
            "Файл\"")]
        [NUnit.Framework.TestCaseAttribute("Описание", null)]
        [NUnit.Framework.TestCaseAttribute("Файл", null)]
        public virtual void ПроверкаПереводаСтатусаОбращенияНаКонечныйСПустымиПолямиОписаниеИлиФайл(string поле, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Проверка перевода статуса обращения на конечный с пустыми полями \"Описание\" или \"" +
                    "Файл\"", exampleTags);
#line 81
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 82
testRunner.When("пользователь заходит в карточку обращения в статус, у которого признак != \"Конечн" +
                    "ый\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 83
testRunner.And(string.Format("не заполняет значением поле \"{0}\"", поле), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 84
testRunner.And("переводит обращение в \"статус\", у которого признак = \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 85
testRunner.Then("\"статус\" обращения меняется", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Проверка перевода статуса обращения на конечный с заполненными полями \"Описание\" " +
            "и \"Файл\"")]
        public virtual void ПроверкаПереводаСтатусаОбращенияНаКонечныйСЗаполненнымиПолямиОписаниеИФайл()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Проверка перевода статуса обращения на конечный с заполненными полями \"Описание\" " +
                    "и \"Файл\"", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 94
testRunner.When("пользователь заходит в карточку обращения в статус, у которого признак != \"Конечн" +
                    "ый\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 95
testRunner.And("заполняет поле \"Описание\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 96
testRunner.And("заполняет поле \"Файл\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 97
testRunner.And("переводит обращение в \"статус\", у которого признак = \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 98
testRunner.Then("\"статус\" обращения меняется", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("удачная смена статуса обращения на конечный")]
        public virtual void УдачнаяСменаСтатусаОбращенияНаКонечный()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("удачная смена статуса обращения на конечный", ((string[])(null)));
#line 101
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 102
testRunner.When("обращение не в статусе с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 103
testRunner.And("у него заполнено поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 104
testRunner.And("у него заполнено поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 105
testRunner.And("пользователь переводит обращение в статус с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 106
testRunner.Then("у обращения меняется статус на \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачная смена статуса обращения на конечный")]
        public virtual void НеудачнаяСменаСтатусаОбращенияНаКонечный()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачная смена статуса обращения на конечный", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 110
testRunner.When("обращение не в статусе с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 111
testRunner.And("у него незаполнено поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 112
testRunner.And("у него незаполнено поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 113
testRunner.And("пользователь переводит обращение в статус с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 114
testRunner.Then("у обращения не меняется статус на \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("смена статуса обращения на конечный с кодом END")]
        [NUnit.Framework.TestCaseAttribute("10.02.2015", "3", null)]
        public virtual void СменаСтатусаОбращенияНаКонечныйСКодомEND(string датаОтвета, string закрытьОбращениеЧерез, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("смена статуса обращения на конечный с кодом END", exampleTags);
#line 117
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 118
testRunner.When("обращение находится в статусе с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 119
testRunner.And(string.Format("\"количество дней ответа\" = дата ответа на обращение \"{0}\" + количество дней из по" +
                        "ля рубрики обращения \"{1}\"", датаОтвета, закрытьОбращениеЧерез), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 120
testRunner.Then("обращение переводится в статус \"Конечный\" с \"кодом\" = \"END\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("удачная смена статуса обращения на конечный при наличии дополнительного вопроса")]
        public virtual void УдачнаяСменаСтатусаОбращенияНаКонечныйПриНаличииДополнительногоВопроса()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("удачная смена статуса обращения на конечный при наличии дополнительного вопроса", ((string[])(null)));
#line 127
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 128
testRunner.When("обращение не в статусе с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 129
testRunner.And("в обращении есть записи по дополнительному вопросу", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 130
testRunner.And("в дополнительном вопросе по каждой записи заполнено поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 131
testRunner.And("в дополнительном вопросе по каждой записи заполнено поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 132
testRunner.And("пользователь переводит обращение в статус с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 133
testRunner.Then("у обращения меняется статус на \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачная смена статуса обращения на конечный при наличии дополнительного вопроса" +
            "")]
        public virtual void НеудачнаяСменаСтатусаОбращенияНаКонечныйПриНаличииДополнительногоВопроса()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачная смена статуса обращения на конечный при наличии дополнительного вопроса" +
                    "", ((string[])(null)));
#line 136
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 137
testRunner.When("обращение не в статусе с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 138
testRunner.And("в обращении есть записи по дополнительному вопросу", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 139
testRunner.And("в дополнительном вопросе по каждой записи незаполнено поле \"Дата ответа\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 140
testRunner.And("в дополнительном вопросе по каждой записи незаполнено поле \"Ответ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 141
testRunner.And("пользователь переводит обращение в статус с признаком \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 142
testRunner.Then("у обращения не меняется статус на \"Конечный\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
