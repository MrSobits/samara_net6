// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.3.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.3.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("доработки к реестру оплат платежных агентов")]
    public partial class ДоработкиКРееструОплатПлатежныхАгентовFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "rf.register_pay_agents.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "доработки к реестру оплат платежных агентов", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("возможность загрузки файла любого расширения для всех типов импорта, кроме универ" +
            "сального")]
        [NUnit.Framework.TestCaseAttribute("Загрузка (Dbf - Питер) (dbf Import)", null)]
        [NUnit.Framework.TestCaseAttribute("Загрузка/Выгрузка (dbf Import)", null)]
        [NUnit.Framework.TestCaseAttribute("Загрузка/Выгрузка (dbf 2) (dbf Import)", null)]
        [NUnit.Framework.TestCaseAttribute("Загрузка/Выгрузка (Json Import, Export)", null)]
        [NUnit.Framework.TestCaseAttribute("Загрузка/Выгрузка (Xml Import, Export)", null)]
        public virtual void ВозможностьЗагрузкиФайлаЛюбогоРасширенияДляВсехТиповИмпортаКромеУниверсального(string формат, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("возможность загрузки файла любого расширения для всех типов импорта, кроме универ" +
                    "сального", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given("Пользователь с ролью администратора, логин \"admin\", пароль \"admin\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 7
testRunner.Given("тестируемая система \"http://gkh-test.bars-open.ru/dev-kamchatka/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 8
testRunner.When("пользователь грузит документ из банка любого расширения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 9
testRunner.Then(string.Format("система проверяет загружаемый файл на соответствие формату импорта {0}", формат), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 10
testRunner.When("файл соответствует формату импорта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 11
testRunner.Then("файл успешно загружается системой и отображается в реестре оплат платежных агенто" +
                    "в", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 12
testRunner.When("файл НЕ соответствует ни одному из существующих в системе форматов импорта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 13
testRunner.Then("выводится сообщение об ошибке с текстом \"Невозможно прочитать файл. Неверный форм" +
                    "ат файла\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("возможность загрузки файла любого расширения для универсального универсального ти" +
            "па импорта")]
        public virtual void ВозможностьЗагрузкиФайлаЛюбогоРасширенияДляУниверсальногоУниверсальногоТипаИмпорта()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("возможность загрузки файла любого расширения для универсального универсального ти" +
                    "па импорта", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
testRunner.Given("Пользователь логин \"admin\", пароль \"admin\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 27
testRunner.And("тестируемая система \"http://gkh-test.bars-open.ru/dev-kamchatka/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 28
testRunner.When("пользователь грузит документ из банка любого расширения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 29
testRunner.And("выбирает тип импорта \"Универсальный импорт (Текстовый формат | Import)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 30
testRunner.And("выбирает тип универсального импорта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 31
testRunner.Then("система сначала проверяет загружаемый файл на соответствие формату импорта \"Униве" +
                    "рсальный импорт (Текстовый формат | Import)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 32
testRunner.And("далее система проверяет загружаемый файл на соответствие формату из типов универс" +
                    "ального импорта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 33
testRunner.When("файл соответствует выбранным форматам", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 34
testRunner.Then("файл успешно загружается системой и отображается в реестре оплат платежных агенто" +
                    "в", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line 35
testRunner.When("файл не проходит хотя бы одну из проверок на форматы импорта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 36
testRunner.Then("выводится сообщение об ошибке с текстом \"Невозможно прочитать файл. Неверный форм" +
                    "ат файла\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
