// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bars.Gkh.Qa.TestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("тесткейсы для добавления исключения к расчету пеней в разделе \"Параметры начислен" +
        "ия пени\"")]
    [NUnit.Framework.CategoryAttribute("ScenarioInTransaction")]
    public partial class ТесткейсыДляДобавленияИсключенияКРасчетуПенейВРазделеПараметрыНачисленияПениFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "add_exclusion_to_pay_penalties.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "тесткейсы для добавления исключения к расчету пеней в разделе \"Параметры начислен" +
                    "ия пени\"", "Региональный фонд - Настройки - Параметры начисления пени", ProgrammingLanguage.CSharp, new string[] {
                        "ScenarioInTransaction"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DecisionType",
                        "DateStart"});
            table1.AddRow(new string[] {
                        "Специальный счет",
                        "10.01.2016"});
            table1.AddRow(new string[] {
                        "Счет регионального оператора",
                        "11.01.2016"});
#line 6
testRunner.Given("добавлен расчет пеней", ((string)(null)), table1, "Дано ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "region",
                        "houseType",
                        "city",
                        "street",
                        "houseNumber"});
            table2.AddRow(new string[] {
                        "testregion",
                        "Многоквартирный",
                        "Камчатский край, Алеутский р-н, с. Никольское",
                        "ул. 50 лет Октября",
                        "д. test"});
#line 11
testRunner.And("в реестр жилых домов добавлен новый дом", ((string)(null)), table2, "И ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "RoomNum",
                        "Area",
                        "LivingArea",
                        "Type",
                        "OwnershipType"});
            table3.AddRow(new string[] {
                        "1",
                        "51",
                        "35",
                        "Жилое",
                        "Частная"});
#line 16
testRunner.And("у этого дома добавлено помещение", ((string)(null)), table3, "И ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Surname",
                        "FirstName",
                        "secondName",
                        "BirthDate",
                        "IdentityType",
                        "IdentitySerial",
                        "IdentityNumber"});
            table4.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест",
                        "12.06.1961",
                        "10",
                        "9206",
                        "612345"});
#line 20
testRunner.Given("добавлен абонент типа Счет физ.лица", ((string)(null)), table4, "Дано ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name",
                        "Percent",
                        "LimitArea",
                        "DateFrom"});
            table5.AddRow(new string[] {
                        "222",
                        "льготная категория 1111",
                        "13",
                        "132",
                        "01.01.2017"});
#line 24
testRunner.Given("добавлена льготная категория", ((string)(null)), table5, "Дано ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Code",
                        "OkopfCode"});
            table6.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест"});
#line 28
testRunner.Given("добавлена организационно-правовая форма", ((string)(null)), table6, "Дано ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "тест"});
#line 32
testRunner.Given("добавлен контрагент с организационно правовой формой", ((string)(null)), table7, "Дано ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Contragent"});
            table8.AddRow(new string[] {
                        "тест"});
#line 36
testRunner.And("добавлен абонент с типом Счет юр.лица", ((string)(null)), table8, "И ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "region",
                        "OpenDate",
                        "RealityObjectAddress",
                        "RoomNum",
                        "AreaShare"});
            table9.AddRow(new string[] {
                        "testregion",
                        "01.01.2015",
                        "с. Никольское ул. 50 лет Октября д. test",
                        "1",
                        "0,5"});
#line 40
testRunner.And("добавлено помещение абоненту типа Счет физ.лица", ((string)(null)), table9, "И ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "region",
                        "OpenDate",
                        "RealityObjectAddress",
                        "RoomNum",
                        "AreaShare"});
            table10.AddRow(new string[] {
                        "testregion",
                        "01.01.2015",
                        "с. Никольское ул. 50 лет Октября д. test",
                        "1",
                        "0,5"});
#line 45
testRunner.And("добавлено помещение абоненту типа Счет юр.лица", ((string)(null)), table10, "И ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление исключения к расчету пеней")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void УспешноеДобавлениеИсключенияКРасчетуПеней()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление исключения к расчету пеней", new string[] {
                        "ignore"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 51
testRunner.When("пользователь к этим расчетам пеней добавляет исключение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 52
testRunner.Then("запись по этому исключению присутствует у этого расчета пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное удаление исключения из расчета пеней")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void УспешноеУдалениеИсключенияИзРасчетаПеней()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное удаление исключения из расчета пеней", new string[] {
                        "ignore"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 56
testRunner.When("пользователь к этим расчетам пеней добавляет исключение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 57
testRunner.And("пользователь из этого расчета пеней с типом Специальный счет удаляет исключение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 58
testRunner.Then("запись по этому исключению отсутствует у этого расчета пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("отсутствие дублирования исключении в расчете пеней")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void ОтсутствиеДублированияИсключенииВРасчетеПеней()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("отсутствие дублирования исключении в расчете пеней", new string[] {
                        "ignore"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 62
testRunner.When("пользователь к этим расчетам пеней добавляет исключение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 63
testRunner.And("пользователь к этим расчетам пеней добавляет исключение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 64
testRunner.Then("запись по этому исключению присутствует у этого расчета пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 65
testRunner.And("количество записей по этому исключению = 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
