// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bars.Gkh.Qa.TestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("тесткейсы граничных значений для раздела \"Виды работ текущего ремонта\"")]
    [NUnit.Framework.CategoryAttribute("ScenarioInTransaction")]
    public partial class ТесткейсыГраничныхЗначенийДляРазделаВидыРаботТекущегоРемонтаFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "work_kinds_current_repair_boundaries.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "тесткейсы граничных значений для раздела \"Виды работ текущего ремонта\"", "Справочники - Жилищно-коммунальное хозяйство - Виды работ текущего ремонта", ProgrammingLanguage.CSharp, new string[] {
                        "ScenarioInTransaction"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачное добавление вида работ текущего ремонта при незаполненных обязательных п" +
            "олях")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void НеудачноеДобавлениеВидаРаботТекущегоРемонтаПриНезаполненныхОбязательныхПолях()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачное добавление вида работ текущего ремонта при незаполненных обязательных п" +
                    "олях", new string[] {
                        "ignore"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
testRunner.Given("пользователь добавляет новый вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 10
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 11
testRunner.Then("запись по этому виду работ текущего ремонта отсутствует в справочнике видов работ" +
                    " текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 12
testRunner.And("падает ошибка с текстом \"Не заполнены обязательные поля: Код Наименование Ед. изм" +
                    "ерения\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("удачное добавление вида работ текущего ремонта при вводе граничных условий в 300 " +
            "знаков, Код")]
        public virtual void УдачноеДобавлениеВидаРаботТекущегоРемонтаПриВводеГраничныхУсловийВ300ЗнаковКод()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("удачное добавление вида работ текущего ремонта при вводе граничных условий в 300 " +
                    "знаков, Код", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "ShortName",
                        "Description"});
            table1.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест"});
#line 15
testRunner.Given("добавлена единица измерения", ((string)(null)), table1, "Дано ");
#line 19
testRunner.Given("пользователь добавляет новый вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 20
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Код 300 символов " +
                    "\"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 21
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Наименование \"вид" +
                    " работ текущего ремонта тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 22
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Ед. измерения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 23
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 24
testRunner.Then("запись по этому виду работ текущего ремонта присутствует в справочнике видов рабо" +
                    "т текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачное добавление вида работ текущего ремонта при вводе граничных условий в 30" +
            "1 знаков, Код")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void НеудачноеДобавлениеВидаРаботТекущегоРемонтаПриВводеГраничныхУсловийВ301ЗнаковКод()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачное добавление вида работ текущего ремонта при вводе граничных условий в 30" +
                    "1 знаков, Код", new string[] {
                        "ignore"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "ShortName",
                        "Description"});
            table2.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест"});
#line 29
testRunner.Given("добавлена единица измерения", ((string)(null)), table2, "Дано ");
#line 33
testRunner.Given("пользователь добавляет новый вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 34
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Код 301 символов " +
                    "\"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 35
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Наименование \"вид" +
                    " работ текущего ремонта тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 36
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Ед. измерения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 37
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 38
testRunner.Then("запись по этому виду работ текущего ремонта отсутствует в справочнике видов работ" +
                    " текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 39
testRunner.And("падает ошибка с текстом \"Не заполнены обязательные поля: Код\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("удачное добавление вида работ текущего ремонта при вводе граничных условий в 300 " +
            "знаков, Наименование")]
        public virtual void УдачноеДобавлениеВидаРаботТекущегоРемонтаПриВводеГраничныхУсловийВ300ЗнаковНаименование()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("удачное добавление вида работ текущего ремонта при вводе граничных условий в 300 " +
                    "знаков, Наименование", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "ShortName",
                        "Description"});
            table3.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест"});
#line 42
testRunner.Given("добавлена единица измерения", ((string)(null)), table3, "Дано ");
#line 46
testRunner.Given("пользователь добавляет новый вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 47
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Код \"вид работ те" +
                    "кущего ремонта тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 48
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Наименование 300 " +
                    "символов \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 49
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Ед. измерения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 50
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 51
testRunner.Then("запись по этому виду работ текущего ремонта присутствует в справочнике видов рабо" +
                    "т текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("неудачное добавление вида работ текущего ремонта при вводе граничных условий в 30" +
            "1 знаков, Наименование")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void НеудачноеДобавлениеВидаРаботТекущегоРемонтаПриВводеГраничныхУсловийВ301ЗнаковНаименование()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("неудачное добавление вида работ текущего ремонта при вводе граничных условий в 30" +
                    "1 знаков, Наименование", new string[] {
                        "ignore"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "ShortName",
                        "Description"});
            table4.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест"});
#line 56
testRunner.Given("добавлена единица измерения", ((string)(null)), table4, "Дано ");
#line 60
testRunner.Given("пользователь добавляет новый вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 61
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Код \"вид работ те" +
                    "кущего ремонта тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 62
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Наименование 301 " +
                    "символов \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 63
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Ед. измерения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 64
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 65
testRunner.Then("запись по этому виду работ текущего ремонта отсутствует в справочнике видов работ" +
                    " текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 66
testRunner.And("падает ошибка с текстом \"Не заполнены обязательные поля: Наименование\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
