// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bars.Gkh.Qa.TestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("тесткейсы для раздела \"Виды работ\"")]
    [NUnit.Framework.CategoryAttribute("ScenarioInTransaction")]
    public partial class ТесткейсыДляРазделаВидыРаботFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "kind_works.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "тесткейсы для раздела \"Виды работ\"", "Справочники - Общие - Виды работ", ProgrammingLanguage.CSharp, new string[] {
                        "ScenarioInTransaction"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "ShortName",
                        "Description"});
            table1.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест"});
#line 7
testRunner.Given("добавлена единица измерения", ((string)(null)), table1, "Дано ");
#line 11
testRunner.Given("пользователь добавляет новый вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 12
testRunner.And("пользователь у этого вида работ заполняет поле Наименование \"тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 13
testRunner.And("пользователь у этого вида работ заполняет поле Ед. измерения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 14
testRunner.And("пользователь у этого вида работ заполняет поле Код \"тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 15
testRunner.And("пользователь у этого вида работ заполняет поле Норматив \"111\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 16
testRunner.And("пользователь у этого вида работ заполняет поле Описание \"тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление вида работ c заполненными обязательными полями")]
        public virtual void УспешноеДобавлениеВидаРаботCЗаполненнымиОбязательнымиПолями()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление вида работ c заполненными обязательными полями", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 19
testRunner.When("пользователь сохраняет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 20
testRunner.Then("запись по этому виду работ присутствует в реестре видов работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление вида работ c пометкой в поле Соответствие 185 ФЗ")]
        public virtual void УспешноеДобавлениеВидаРаботCПометкойВПолеСоответствие185ФЗ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление вида работ c пометкой в поле Соответствие 185 ФЗ", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 23
testRunner.Given("пользователь у этого вида работ помечает поле Соответствие 185 ФЗ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 24
testRunner.When("пользователь сохраняет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 25
testRunner.Then("запись по этому виду работ присутствует в реестре видов работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 26
testRunner.And("в этом виде работ значение в поле Соответствие 185 ФЗ = true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление вида работ c пометкой в поле Доп. работа")]
        public virtual void УспешноеДобавлениеВидаРаботCПометкойВПолеДоп_Работа()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление вида работ c пометкой в поле Доп. работа", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 29
testRunner.Given("пользователь у этого вида работ помечает поле Доп. работа", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 30
testRunner.When("пользователь сохраняет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 31
testRunner.Then("запись по этому виду работ присутствует в реестре видов работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 32
testRunner.And("в этом виде работ значение в поле Доп. работа = true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление вида работы c пометками в поле Соответствие 185 ФЗ, Доп. рабо" +
            "та")]
        public virtual void УспешноеДобавлениеВидаРаботыCПометкамиВПолеСоответствие185ФЗДоп_Работа()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление вида работы c пометками в поле Соответствие 185 ФЗ, Доп. рабо" +
                    "та", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 35
testRunner.Given("пользователь у этого вида работ помечает поле Соответствие 185 ФЗ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 36
testRunner.And("пользователь у этого вида работ помечает поле Доп. работа", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 37
testRunner.When("пользователь сохраняет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 38
testRunner.Then("запись по этому виду работ присутствует в реестре видов работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 39
testRunner.And("в этом виде работ значение в поле Соответствие 185 ФЗ = true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 40
testRunner.And("в этом виде работ значение в поле Доп. работа = true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление вида работы с заполненным полем Тип работ")]
        [NUnit.Framework.TestCaseAttribute("Работа", null)]
        [NUnit.Framework.TestCaseAttribute("Услуга", null)]
        public virtual void УспешноеДобавлениеВидаРаботыСЗаполненнымПолемТипРабот(string типРабот, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление вида работы с заполненным полем Тип работ", exampleTags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 43
testRunner.Given(string.Format("пользователь у этого вида работы заполняет поле Тип работ \"{0}\"", типРабот), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 44
testRunner.When("пользователь сохраняет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 45
testRunner.Then("запись по этому виду работ присутствует в реестре видов работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление вида работы c пометках в источниках финансирования")]
        public virtual void УспешноеДобавлениеВидаРаботыCПометкахВИсточникахФинансирования()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление вида работы c пометках в источниках финансирования", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 53
testRunner.Given("пользователь у этого вида работ в источниках финансирования помечает поле Бюджет " +
                    "фонда", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 54
testRunner.And("пользователь у этого вида работ в источниках финансирования помечает поле Бюджет " +
                    "региона", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 55
testRunner.And("пользователь у этого вида работ в источниках финансирования помечает поле Бюджет " +
                    "МО", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 56
testRunner.And("пользователь у этого вида работ в источниках финансирования помечает поле Средств" +
                    "а собственника", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 57
testRunner.And("пользователь у этого вида работ в источниках финансирования помечает поле Иные ис" +
                    "точники", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 58
testRunner.When("пользователь сохраняет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 59
testRunner.Then("запись по этому виду работ присутствует в реестре видов работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 60
testRunner.And("в этом виде работ в источниках финансирования значение в поле Бюджет фонда = true" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 61
testRunner.And("в этом виде работ в источниках финансирования значение в поле Бюджет региона = tr" +
                    "ue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 62
testRunner.And("в этом виде работ в источниках финансирования значение в поле Бюджет МО = true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 63
testRunner.And("в этом виде работ в источниках финансирования значение в поле Средства собственни" +
                    "ка = true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 64
testRunner.And("в этом виде работ в источниках финансирования значение в поле Иные источники = tr" +
                    "ue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное удаление вида работы c заполненными обязательными полями")]
        public virtual void УспешноеУдалениеВидаРаботыCЗаполненнымиОбязательнымиПолями()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное удаление вида работы c заполненными обязательными полями", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 67
testRunner.When("пользователь сохраняет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 68
testRunner.And("пользователь удаляет этот вид работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 69
testRunner.Then("запись по этому виду работ отсутствует в реестре видов работ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
