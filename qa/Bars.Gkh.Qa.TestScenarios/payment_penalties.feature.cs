// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bars.Gkh.Qa.TestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("тесткейсы для раздела \"Параметры начисления пени\"")]
    public partial class ТесткейсыДляРазделаПараметрыНачисленияПениFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "payment_penalties.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "тесткейсы для раздела \"Параметры начисления пени\"", "Администрирование - Настройки приложения - Единые настройки приложения - раздел в" +
                    " дереве \"Параметры начисления пени\"", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
testRunner.Given("пользователь добавляет новый расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 6
testRunner.And("пользователь у этого расчета пеней заполняет поле Количество дней \"15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 7
testRunner.And("пользователь у этого расчета пеней заполняет поле Ставка рефинансирования, % \"15\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1. успешное добавление расчета пеней")]
        [NUnit.Framework.TestCaseAttribute("Специальный счет", "10.01.2115", null)]
        [NUnit.Framework.TestCaseAttribute("Счет регионального оператора", "11.01.2115", null)]
        public virtual void _1_УспешноеДобавлениеРасчетаПеней(string способФормированияФонда, string датаНачала, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1. успешное добавление расчета пеней", exampleTags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 10
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 11
testRunner.Given(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 12
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 13
testRunner.Then("запись по этому расчету пеней присутствует в разделе параметров начисления пени", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 14
testRunner.And("у этой записи не заполнено поле Дата окончания", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2. неудачное добавление дубля расчета пеней, с одинаковой датой")]
        [NUnit.Framework.TestCaseAttribute("Специальный счет", "10.01.2116", null)]
        [NUnit.Framework.TestCaseAttribute("Счет регионального оператора", "11.01.2116", null)]
        public virtual void _2_НеудачноеДобавлениеДубляРасчетаПенейСОдинаковойДатой(string способФормированияФонда, string датаНачала, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2. неудачное добавление дубля расчета пеней, с одинаковой датой", exampleTags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 22
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 23
testRunner.Given(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 24
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 25
testRunner.Given("пользователь добавляет новый расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 26
testRunner.And("пользователь у этого расчета пеней заполняет поле Количество дней \"15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 27
testRunner.And("пользователь у этого расчета пеней заполняет поле Ставка рефинансирования, % \"15\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 28
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 29
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 30
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 31
testRunner.Then("запись по этому расчету пеней отсутствует в разделе параметров начисления пени", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 32
testRunner.And("падает ошибка с текстом \"Внимание! Дата начала действия нового значения не может " +
                    "быть раньше уже действующего параметра!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3. неудачное добавление дубля расчета пеней, с датой дубля < даты оригинала запис" +
            "и")]
        [NUnit.Framework.TestCaseAttribute("Специальный счет", "10.01.2117", null)]
        [NUnit.Framework.TestCaseAttribute("Счет регионального оператора", "12.01.2117", null)]
        public virtual void _3_НеудачноеДобавлениеДубляРасчетаПенейСДатойДубляДатыОригиналаЗаписи(string способФормированияФонда, string датаНачала, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3. неудачное добавление дубля расчета пеней, с датой дубля < даты оригинала запис" +
                    "и", exampleTags);
#line 40
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 41
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 42
testRunner.Given(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 43
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 44
testRunner.Given("пользователь добавляет новый расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 45
testRunner.And("пользователь у этого расчета пеней заполняет поле Количество дней \"15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 46
testRunner.And("пользователь у этого расчета пеней заполняет поле Ставка рефинансирования, % \"15\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 47
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 48
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 49
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 50
testRunner.Then("запись по этому расчету пеней отсутствует в разделе параметров начисления пени", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 51
testRunner.And("падает ошибка с текстом \"Внимание! Дата начала действия нового значения не может " +
                    "быть раньше уже действующего параметра!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("4. удачное добавление дубля расчета пеней, с датой дубля > даты оригинала записи")]
        [NUnit.Framework.TestCaseAttribute("Специальный счет", "10.01.2118", "11.01.2118", "10.01.2118", null)]
        [NUnit.Framework.TestCaseAttribute("Счет регионального оператора", "12.01.2118", "13.01.2118", "12.01.2118", null)]
        public virtual void _4_УдачноеДобавлениеДубляРасчетаПенейСДатойДубляДатыОригиналаЗаписи(string способФормированияФонда, string датаНачала, string датаНачала2, string датаОкончания, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4. удачное добавление дубля расчета пеней, с датой дубля > даты оригинала записи", exampleTags);
#line 58
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 59
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 60
testRunner.Given(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 61
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 62
testRunner.Given("пользователь добавляет новый расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 63
testRunner.And("пользователь у этого расчета пеней заполняет поле Количество дней \"15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 64
testRunner.And("пользователь у этого расчета пеней заполняет поле Ставка рефинансирования, % \"15\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 65
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 66
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 67
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 68
testRunner.Then("запись по этому расчету пеней присутствует в разделе параметров начисления пени", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line 69
testRunner.And(string.Format("у записи с очередностью \"1\" поле Дата окончания должна быть \"{0}\"", датаОкончания), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("5. успешное добавление исключения к параметру расчета пеней")]
        [NUnit.Framework.TestCaseAttribute("Специальный счет", "10.01.2119", null)]
        [NUnit.Framework.TestCaseAttribute("Счет регионального оператора", "11.01.2119", null)]
        public virtual void _5_УспешноеДобавлениеИсключенияКПараметруРасчетаПеней(string способФормированияФонда, string датаНачала, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5. успешное добавление исключения к параметру расчета пеней", exampleTags);
#line 77
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 78
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 79
testRunner.Given(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 80
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 81
testRunner.And("пользователь у этого расчета пеней добавляет исключение ЛС \"100000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 82
testRunner.Then("в списке исключений у этого параметра расчета пеней присутствует исключение для Л" +
                    "С \"100000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("6. успешное удаление исключения из параметра расчета пеней")]
        [NUnit.Framework.TestCaseAttribute("Специальный счет", "10.01.2120", null)]
        [NUnit.Framework.TestCaseAttribute("Счет регионального оператора", "11.01.2120", null)]
        public virtual void _6_УспешноеУдалениеИсключенияИзПараметраРасчетаПеней(string способФормированияФонда, string датаНачала, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6. успешное удаление исключения из параметра расчета пеней", exampleTags);
#line 89
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 90
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 91
testRunner.Given(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 92
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 93
testRunner.And("пользователь у этого расчета пеней добавляет исключение ЛС \"100000881\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 94
testRunner.And("пользователь у этого расчета пеней удаляет это исключение", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 95
testRunner.Then("в списке исключений у этого параметра расчета пеней отсутствует исключение для ЛС" +
                    " \"100000881\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("7. Отсутствие повторного выбора лс в исключениях")]
        [NUnit.Framework.TestCaseAttribute("Специальный счет", "10.01.2121", null)]
        [NUnit.Framework.TestCaseAttribute("Счет регионального оператора", "11.01.2121", null)]
        public virtual void _7_ОтсутствиеПовторногоВыбораЛсВИсключениях(string способФормированияФонда, string датаНачала, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("7. Отсутствие повторного выбора лс в исключениях", exampleTags);
#line 103
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 104
testRunner.And(string.Format("пользователь у этого расчета пеней заполняет поле Дата начала \"{0}\"", датаНачала), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 105
testRunner.Given(string.Format("пользователь у этого расчета пеней заполняет поле Способ формирования фонда \"{0}\"" +
                        "", способФормированияФонда), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 106
testRunner.When("пользователь сохраняет этот расчет пеней", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 107
testRunner.And("пользователь у этого расчета пеней добавляет исключение ЛС \"100000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 108
testRunner.Then("в списке добавления исключений у этого расчета пеней отсутствует ЛС \"100000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
