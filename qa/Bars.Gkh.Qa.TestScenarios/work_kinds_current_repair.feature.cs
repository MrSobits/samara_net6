// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bars.Gkh.Qa.TestScenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("тесткейсы для раздела \"Виды работ текущего ремонта\"")]
    [NUnit.Framework.CategoryAttribute("ScenarioInTransaction")]
    public partial class ТесткейсыДляРазделаВидыРаботТекущегоРемонтаFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "work_kinds_current_repair.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "тесткейсы для раздела \"Виды работ текущего ремонта\"", "Справочники - Жилищно-коммунальное хозяйство - Виды работ текущего ремонта", ProgrammingLanguage.CSharp, new string[] {
                        "ScenarioInTransaction"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "ShortName",
                        "Description"});
            table1.AddRow(new string[] {
                        "тест",
                        "тест",
                        "тест"});
#line 7
testRunner.Given("добавлена единица измерения", ((string)(null)), table1, "Дано ");
#line 11
testRunner.Given("пользователь добавляет новый вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 12
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Код \"тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 13
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Наименование \"вид" +
                    " работ текущего ремонта тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 14
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Ед. измерения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление вида работ текущего ремонта")]
        [NUnit.Framework.TestCaseAttribute("Работа", null)]
        [NUnit.Framework.TestCaseAttribute("Услуга", null)]
        public virtual void УспешноеДобавлениеВидаРаботТекущегоРемонта(string типРабот, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление вида работ текущего ремонта", exampleTags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 17
testRunner.Given(string.Format("пользователь у этого вида работ текущего ремонта заполняет поле Тип работ \"{0}\"", типРабот), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 18
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 19
testRunner.Then("запись по этому виду работ текущего ремонта присутствует в справочнике видов рабо" +
                    "т текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное удаление вида работ текущего ремонта")]
        [NUnit.Framework.TestCaseAttribute("Работа", null)]
        [NUnit.Framework.TestCaseAttribute("Услуга", null)]
        public virtual void УспешноеУдалениеВидаРаботТекущегоРемонта(string типРабот, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное удаление вида работ текущего ремонта", exampleTags);
#line 26
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 27
testRunner.Given(string.Format("пользователь у этого вида работ текущего ремонта заполняет поле Тип работ \"{0}\"", типРабот), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 28
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 29
testRunner.And("пользователь удаляет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 30
testRunner.Then("запись по этому виду работ текущего ремонта отсутствует в справочнике видов работ" +
                    " текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("успешное добавление дубля вида работ текущего ремонта")]
        [NUnit.Framework.TestCaseAttribute("Работа", null)]
        [NUnit.Framework.TestCaseAttribute("Услуга", null)]
        public virtual void УспешноеДобавлениеДубляВидаРаботТекущегоРемонта(string типРабот, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("успешное добавление дубля вида работ текущего ремонта", exampleTags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
testRunner.Given(string.Format("пользователь у этого вида работ текущего ремонта заполняет поле Тип работ \"{0}\"", типРабот), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 39
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 40
testRunner.Given("пользователь добавляет новый вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Дано ");
#line 41
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Код \"тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 42
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Наименование \"вид" +
                    " работ текущего ремонта тест\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 43
testRunner.And("пользователь у этого вида работ текущего ремонта заполняет поле Ед. измерения", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 44
testRunner.When("пользователь сохраняет этот вид работ текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Когда ");
#line 45
testRunner.Then("запись по этому виду работ текущего ремонта присутствует в справочнике видов рабо" +
                    "т текущего ремонта", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Тогда ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
